"use client";

import React, { useState, useEffect } from "react";
import { useRouter } from "next/navigation";
import { UserPreferencesService, type UserPreferences } from "@/lib/services/userPreferencesService";

export default function PreferencesPage() {
  const router = useRouter();
  const [preferences, setPreferences] = useState<UserPreferences>({
    name: '',
    occupation: '',
    traits: [],
    additionalInfo: ''
  });
  const [isLoading, setIsLoading] = useState(false);
  const [hasChanges, setHasChanges] = useState(false);

  // Get service instance
  const preferencesService = UserPreferencesService.getInstance();
  const availableTraits = preferencesService.getAvailableTraits();

  // Load preferences on component mount
  useEffect(() => {
    loadPreferences();
  }, []);

  const loadPreferences = () => {
    try {
      const saved = preferencesService.getPreferences();
      if (saved) {
        setPreferences(saved);
      }
    } catch (error) {
      console.error('Error loading preferences:', error);
    }
  };

  const savePreferences = async () => {
    setIsLoading(true);
    try {
      // Save using the service
      preferencesService.savePreferences(preferences);
      
      setHasChanges(false);
      
      // Show success message
      alert('T√πy ch·ªçn ƒë√£ ƒë∆∞·ª£c l∆∞u th√†nh c√¥ng!');
    } catch (error) {
      console.error('Error saving preferences:', error);
      alert('C√≥ l·ªói x·∫£y ra khi l∆∞u t√πy ch·ªçn. Vui l√≤ng th·ª≠ l·∫°i.');
    } finally {
      setIsLoading(false);
    }
  };

  const updatePreferences = (updates: Partial<UserPreferences>) => {
    setPreferences(prev => ({ ...prev, ...updates }));
    setHasChanges(true);
  };

  const toggleTrait = (traitId: string) => {
    const newTraits = preferences.traits.includes(traitId)
      ? preferences.traits.filter(t => t !== traitId)
      : [...preferences.traits, traitId];
    
    updatePreferences({ traits: newTraits });
  };

  const resetPreferences = () => {
    if (window.confirm('B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën reset t·∫•t c·∫£ t√πy ch·ªçn v·ªÅ m·∫∑c ƒë·ªãnh?')) {
      setPreferences({
        name: '',
        occupation: '',
        traits: [],
        additionalInfo: ''
      });
      setHasChanges(true);
    }
  };

  const goBack = () => {
    if (hasChanges && window.confirm('B·∫°n c√≥ thay ƒë·ªïi ch∆∞a l∆∞u. B·∫°n c√≥ mu·ªën r·ªùi kh·ªèi trang n√†y?')) {
      router.push('/');
    } else if (!hasChanges) {
      router.push('/');
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 py-8 px-4">
      <div className="max-w-2xl mx-auto">
        <div className="bg-white rounded-xl shadow-lg p-8">
          {/* Header */}
          <div className="flex items-center justify-between mb-8">
            <div>
              <h1 className="text-3xl font-bold text-gray-900">
                üéì T√πy ch·ªânh Tr·ª£ l√Ω T∆∞ v·∫•n FPT School
              </h1>
              <p className="text-gray-600 mt-2">
                C√° nh√¢n h√≥a tr·∫£i nghi·ªám t∆∞ v·∫•n tuy·ªÉn sinh v√† ƒë·ªãnh h∆∞·ªõng ngh·ªÅ nghi·ªáp
              </p>
            </div>
            <button
              onClick={goBack}
              className="px-4 py-2 text-gray-600 hover:text-gray-800 border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors"
            >
              ‚Üê Quay l·∫°i
            </button>
          </div>

          {/* Name Section */}
          <div className="mb-8">
            <label className="block text-lg font-semibold text-gray-800 mb-3">
              Tr·ª£ l√Ω t∆∞ v·∫•n n√™n g·ªçi b·∫°n l√† g√¨?
            </label>
            <input
              type="text"
              value={preferences.name}
              onChange={(e) => updatePreferences({ name: e.target.value })}
              placeholder="V√≠ d·ª•: Minh, H√†, ho·∫∑c t√™n b·∫°n mu·ªën ƒë∆∞·ª£c g·ªçi"
              className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 text-lg"
              maxLength={50}
            />
            <div className="text-right text-sm text-gray-500 mt-1">
              {preferences.name.length}/50
            </div>
          </div>

          {/* Occupation Section */}
          <div className="mb-8">
            <label className="block text-lg font-semibold text-gray-800 mb-3">
              B·∫°n hi·ªán t·∫°i ƒëang l√† g√¨?
            </label>
            <input
              type="text"
              value={preferences.occupation}
              onChange={(e) => updatePreferences({ occupation: e.target.value })}
              placeholder="V√≠ d·ª•: H·ªçc sinh l·ªõp 12, Sinh vi√™n nƒÉm 1, Ph·ª• huynh, Ng∆∞·ªùi ƒëi l√†m mu·ªën h·ªçc th√™m"
              className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 text-lg"
              maxLength={100}
            />
            <div className="text-right text-sm text-gray-500 mt-1">
              {preferences.occupation.length}/100
            </div>
          </div>

          {/* Traits Section */}
          <div className="mb-8">
            <label className="block text-lg font-semibold text-gray-800 mb-3">
              B·∫°n mu·ªën tr·ª£ l√Ω t∆∞ v·∫•n c√≥ phong c√°ch giao ti·∫øp nh∆∞ th·∫ø n√†o?
              <span className="text-sm font-normal text-gray-600 ml-2">
                (ch·ªçn t·ªëi ƒëa 5 ƒë·∫∑c ƒëi·ªÉm)
              </span>
            </label>
            <div className="grid grid-cols-2 md:grid-cols-3 gap-3">
              {availableTraits.map((trait) => (
                <button
                  key={trait.id}
                  onClick={() => toggleTrait(trait.id)}
                  disabled={!preferences.traits.includes(trait.id) && preferences.traits.length >= 5}
                  className={`flex items-center justify-center gap-2 px-4 py-3 rounded-lg border-2 transition-all ${
                    preferences.traits.includes(trait.id)
                      ? 'border-blue-500 bg-blue-50 text-blue-700'
                      : 'border-gray-200 bg-white text-gray-700 hover:border-gray-300 hover:bg-gray-50'
                  } ${
                    !preferences.traits.includes(trait.id) && preferences.traits.length >= 5
                      ? 'opacity-50 cursor-not-allowed'
                      : ''
                  }`}
                >
                  <span className="text-lg">{trait.icon}</span>
                  <span className="font-medium">{trait.label}</span>
                </button>
              ))}
            </div>
            <div className="text-right text-sm text-gray-500 mt-2">
              {preferences.traits.length}/5 ƒë·∫∑c ƒëi·ªÉm ƒë√£ ch·ªçn
            </div>
          </div>

          {/* Additional Info Section */}
          <div className="mb-8">
            <label className="block text-lg font-semibold text-gray-800 mb-3">
              Chia s·∫ª th√™m v·ªÅ b·∫£n th√¢n ƒë·ªÉ ƒë∆∞·ª£c t∆∞ v·∫•n ph√π h·ª£p h∆°n
            </label>
            <textarea
              value={preferences.additionalInfo}
              onChange={(e) => updatePreferences({ additionalInfo: e.target.value })}
              placeholder="V√≠ d·ª•: S·ªü th√≠ch c√¥ng ngh·ªá, mong mu·ªën v·ªÅ m√¥i tr∆∞·ªùng l√†m vi·ªác, m·ª•c ti√™u ngh·ªÅ nghi·ªáp, ƒëi·ªÅu lo l·∫Øng v·ªÅ vi·ªác ch·ªçn ng√†nh..."
              rows={6}
              className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 text-lg resize-none"
              maxLength={3000}
            />
            <div className="text-right text-sm text-gray-500 mt-1">
              {preferences.additionalInfo.length}/3000
            </div>
          </div>

          {/* Action Buttons */}
          <div className="flex flex-col sm:flex-row gap-4 justify-between">
            <button
              onClick={resetPreferences}
              className="px-6 py-3 text-gray-600 border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors font-medium"
            >
              üîÑ Reset v·ªÅ m·∫∑c ƒë·ªãnh
            </button>
            
            <div className="flex gap-4">
              <button
                onClick={goBack}
                className="px-6 py-3 text-gray-600 border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors font-medium"
              >
                H·ªßy
              </button>
              <button
                onClick={savePreferences}
                disabled={isLoading || !hasChanges}
                className={`px-8 py-3 rounded-lg font-medium transition-colors ${
                  hasChanges && !isLoading
                    ? 'bg-blue-600 text-white hover:bg-blue-700'
                    : 'bg-gray-300 text-gray-500 cursor-not-allowed'
                }`}
              >
                {isLoading ? (
                  <span className="flex items-center gap-2">
                    <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
                    ƒêang l∆∞u...
                  </span>
                ) : (
                  'üíæ L∆∞u t√πy ch·ªçn'
                )}
              </button>
            </div>
          </div>

          {/* Help Text */}
          <div className="mt-8 p-4 bg-blue-50 rounded-lg border border-blue-200">
            <div className="flex items-start gap-3">
              <span className="text-blue-500 text-xl">üí°</span>
              <div className="text-blue-800">
                <p className="font-medium mb-2">M·∫πo s·ª≠ d·ª•ng:</p>
                <ul className="text-sm space-y-1 list-disc list-inside">
                  <li>Th√¥ng tin c√° nh√¢n gi√∫p tr·ª£ l√Ω t∆∞ v·∫•n ƒë·ªãnh h∆∞·ªõng ch√≠nh x√°c h∆°n</li>
                  <li>Phong c√°ch giao ti·∫øp ƒë∆∞·ª£c ch·ªçn s·∫Ω ·∫£nh h∆∞·ªüng ƒë·∫øn c√°ch tr·∫£ l·ªùi</li>
                  <li>B·∫°n c√≥ th·ªÉ c·∫≠p nh·∫≠t th√¥ng tin b·∫•t c·ª© l√∫c n√†o</li>
                  <li>T·∫•t c·∫£ d·ªØ li·ªáu ƒë∆∞·ª£c l∆∞u an to√†n tr√™n thi·∫øt b·ªã c·ªßa b·∫°n</li>
                  <li>Th√¥ng tin n√†y ch·ªâ d√πng ƒë·ªÉ c·∫£i thi·ªán tr·∫£i nghi·ªám t∆∞ v·∫•n</li>
                </ul>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
} 