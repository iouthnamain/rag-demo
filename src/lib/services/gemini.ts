import { GoogleGenerativeAI } from '@google/generative-ai';
import { env } from '~/env';

/**
 * Google Gemini AI Service
 * Handles text generation and embeddings for RAG system
 */
class GeminiService {
  private static instance: GeminiService;
  private genAI: GoogleGenerativeAI;
  private model: unknown;
  private embeddingModel: unknown;

  private constructor() {
    // Check if we're in demo mode
    if (env.GEMINI_API_KEY === 'demo') {
      console.log('üîß Running in demo mode - Gemini AI disabled');
      // Create mock objects for demo mode
      this.genAI = {} as GoogleGenerativeAI;
      this.model = {} as unknown;
      this.embeddingModel = {} as unknown;
      return;
    }
    
    // Initialize Google Generative AI with API key
    this.genAI = new GoogleGenerativeAI(env.GEMINI_API_KEY);
    this.model = this.genAI.getGenerativeModel({ model: "gemini-1.5-flash" });
    this.embeddingModel = this.genAI.getGenerativeModel({ model: "text-embedding-004" });
  }

  /**
   * Get singleton instance of GeminiService
   */
  public static getInstance(): GeminiService {
    if (!GeminiService.instance) {
      GeminiService.instance = new GeminiService();
    }
    return GeminiService.instance;
  }

  /**
   * Generate embeddings for text using Gemini
   */
  public async generateEmbedding(text: string): Promise<number[]> {
    // Demo mode - return mock embedding
    if (env.GEMINI_API_KEY === 'demo') {
      return this.generateMockEmbedding(text);
    }
    
    try {
      const result = await (this.embeddingModel as { embedContent: (text: string) => Promise<{ embedding: { values: number[] } }> }).embedContent(text);
      return result.embedding.values;
    } catch (error) {
      console.error('Error generating embedding with Gemini:', error);
      throw error;
    }
  }

  /**
   * Generate embeddings for multiple texts
   */
  public async generateEmbeddings(texts: string[]): Promise<number[][]> {
    try {
      const embeddings = await Promise.all(
        texts.map(text => this.generateEmbedding(text))
      );
      return embeddings;
    } catch (error) {
      console.error('Error generating embeddings:', error);
      throw error;
    }
  }

  /**
   * Generate answer using Gemini AI with context array
   */
  public async generateAnswer(
    question: string, 
    context: string[]
  ): Promise<string>;

  /**
   * Generate answer using Gemini AI with string context and custom prompt
   */
  public async generateAnswer(
    question: string, 
    context: string, 
    customPrompt?: string
  ): Promise<string>;

  /**
   * Implementation of generateAnswer
   */
  public async generateAnswer(
    question: string, 
    context: string | string[],
    customPrompt?: string
  ): Promise<string> {
    // Demo mode - return mock answer
    if (env.GEMINI_API_KEY === 'demo') {
      const contextArray = Array.isArray(context) ? context : [context];
      return this.generateMockAnswer(question, contextArray);
    }
    
    try {
      let prompt: string;
      
      if (customPrompt) {
        // Use custom prompt if provided
        prompt = customPrompt;
      } else {
        // Create prompt with context and question
        const contextText = Array.isArray(context) ? context.join('\n\n') : context;
        prompt = this.buildPrompt(question, contextText);
      }
      
      const result = await (this.model as { generateContent: (prompt: string) => Promise<{ response: Promise<{ text: () => string }> }> }).generateContent(prompt);
      const response = await result.response;
      const text = response.text();
      
      return text.trim();
    } catch (error) {
      console.error('Error generating answer with Gemini:', error);
      throw error;
    }
  }

  /**
   * Build prompt for career counseling chatbot
   */
  private buildPrompt(question: string, context: string): string {
    return `B·∫°n l√† m·ªôt chuy√™n gia t∆∞ v·∫•n ngh·ªÅ nghi·ªáp th√¥ng minh v√† nhi·ªát t√¨nh. 
Nhi·ªám v·ª• c·ªßa b·∫°n l√† tr·∫£ l·ªùi c√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng d·ª±a tr√™n th√¥ng tin ƒë∆∞·ª£c cung c·∫•p t·ª´ t√†i li·ªáu.

NGUY√äN T·∫ÆC QUAN TR·ªåNG:
1. Ch·ªâ tr·∫£ l·ªùi d·ª±a tr√™n th√¥ng tin c√≥ trong t√†i li·ªáu ƒë∆∞·ª£c cung c·∫•p
2. N·∫øu kh√¥ng c√≥ ƒë·ªß th√¥ng tin ƒë·ªÉ tr·∫£ l·ªùi, h√£y n√≥i: "T√¥i ch∆∞a ƒë·ªß d·ªØ li·ªáu ƒë·ªÉ tr·∫£ l·ªùi c√¢u h·ªèi n√†y t·ª´ t√†i li·ªáu hi·ªán c√≥."
3. Tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát
4. Gi·ªØ gi·ªçng ƒëi·ªáu th√¢n thi·ªán, chuy√™n nghi·ªáp
5. Cung c·∫•p th√¥ng tin c·ª• th·ªÉ v√† h·ªØu √≠ch
6. **ƒê·ªäNH D·∫†NG**: S·ª≠ d·ª•ng Markdown ƒë·ªÉ ƒë·ªãnh d·∫°ng c√¢u tr·∫£ l·ªùi:
   - D√πng **in ƒë·∫≠m** cho c√°c ƒëi·ªÉm quan tr·ªçng
   - D√πng *in nghi√™ng* cho nh·∫•n m·∫°nh
   - D√πng danh s√°ch c√≥ d·∫•u ƒë·∫ßu d√≤ng (-) ho·∫∑c s·ªë (1.) khi li·ªát k√™
   - D√πng > ƒë·ªÉ tr√≠ch d·∫´n th√¥ng tin t·ª´ t√†i li·ªáu
   - D√πng \`code\` cho thu·∫≠t ng·ªØ chuy√™n m√¥n

TH√îNG TIN T·ª™ T√ÄI LI·ªÜU:
${context}

C√ÇU H·ªéI C·ª¶A NG∆Ø·ªúI D√ôNG:
${question}

TR·∫¢ L·ªúI (b·∫±ng ti·∫øng Vi·ªát, ƒë·ªãnh d·∫°ng Markdown):`;
  }

  /**
   * Check if the response indicates insufficient data
   */
  public isInsufficientDataResponse(response: string): boolean {
    const insufficientDataPhrases = [
      't√¥i ch∆∞a ƒë·ªß d·ªØ li·ªáu',
      'kh√¥ng c√≥ ƒë·ªß th√¥ng tin',
      'th√¥ng tin kh√¥ng ƒë·∫ßy ƒë·ªß',
      'kh√¥ng th·ªÉ tr·∫£ l·ªùi'
    ];
    
    return insufficientDataPhrases.some(phrase => 
      response.toLowerCase().includes(phrase.toLowerCase())
    );
  }

  /**
   * Generate a fallback response when no relevant context is found
   */
  public generateFallbackResponse(): string {
    return "T√¥i ch∆∞a ƒë·ªß d·ªØ li·ªáu ƒë·ªÉ tr·∫£ l·ªùi c√¢u h·ªèi n√†y t·ª´ t√†i li·ªáu hi·ªán c√≥.";
  }

  /**
   * Generate mock embedding for demo mode
   */
  private generateMockEmbedding(text: string): number[] {
    // Generate a deterministic but varied embedding based on text content
    const embedding = new Array(768).fill(0);
    const hash = this.simpleHash(text);
    
    for (let i = 0; i < 768; i++) {
      embedding[i] = Math.sin(hash + i) * 0.1;
    }
    
    return embedding;
  }

  /**
   * Generate mock answer for demo mode
   */
  private generateMockAnswer(question: string, context: string[]): string {
    if (context.length === 0) {
      return this.generateFallbackResponse();
    }
    
    // Simple mock response based on context
    const contextText = context.join(' ');
    const questionLower = question.toLowerCase();
    
    if (questionLower.includes('ngh·ªÅ nghi·ªáp') || questionLower.includes('career')) {
      return `## T∆∞ v·∫•n ngh·ªÅ nghi·ªáp

**D·ª±a tr√™n t√†i li·ªáu**, t√¥i c√≥ th·ªÉ gi√∫p b·∫°n v·ªÅ v·∫•n ƒë·ªÅ ngh·ªÅ nghi·ªáp:

> ${contextText.substring(0, 200)}...

*Th√¥ng tin n√†y ƒë∆∞·ª£c tr√≠ch xu·∫•t t·ª´ t√†i li·ªáu h∆∞·ªõng d·∫´n ngh·ªÅ nghi·ªáp.*`;
    }
    
    if (questionLower.includes('k·ªπ nƒÉng') || questionLower.includes('skill')) {
      return `## V·ªÅ k·ªπ nƒÉng

**T√†i li·ªáu ƒë·ªÅ c·∫≠p ƒë·∫øn:**

> ${contextText.substring(0, 200)}...

- ƒê√¢y l√† th√¥ng tin ƒë∆∞·ª£c tr√≠ch t·ª´ t√†i li·ªáu
- B·∫°n c√≥ th·ªÉ tham kh·∫£o ƒë·ªÉ ph√°t tri·ªÉn k·ªπ nƒÉng`;
    }
    
    return `## C√¢u h·ªèi: *"${question}"*

**D·ª±a tr√™n t√†i li·ªáu c√≥ s·∫µn:**

> ${contextText.substring(0, 300)}...

*Th√¥ng tin ƒë∆∞·ª£c tr√≠ch xu·∫•t t·ª´ c∆° s·ªü d·ªØ li·ªáu t√†i li·ªáu.*`;
  }

  /**
   * Simple hash function for generating deterministic embeddings
   */
  private simpleHash(str: string): number {
    let hash = 0;
    for (let i = 0; i < str.length; i++) {
      const char = str.charCodeAt(i);
      hash = ((hash << 5) - hash) + char;
      hash = hash & hash; // Convert to 32-bit integer
    }
    return hash;
  }

  /**
   * Check if a question is career-related or general conversation
   * Prioritizes FPT School counseling over general chat - very aggressive classification
   */
  public isCareerRelatedQuestion(question: string): boolean {
    const questionLower = question.toLowerCase();
    
    // Immediate FPT School and education keywords - always career-related
    const fptEducationKeywords = [
      'fpt', 'school', 'tr∆∞·ªùng', 'ƒë·∫°i h·ªçc', 'cao ƒë·∫≥ng', 'university', 'college',
      'h·ªçc ph√≠', 'tuition', 'chi ph√≠', 'cost', 'h·ªçc b·ªïng', 'scholarship',
      'tuy·ªÉn sinh', 'admission', 'ƒëƒÉng k√Ω', 'register', 'nh·∫≠p h·ªçc', 'enroll',
      'ch∆∞∆°ng tr√¨nh', 'program', 'kh√≥a h·ªçc', 'course', 'm√¥n h·ªçc', 'subject',
      'gi·∫£ng vi√™n', 'teacher', 'th·∫ßy c√¥', 'instructor', 'mentor',
      'b·∫±ng c·∫•p', 'degree', 'ch·ª©ng ch·ªâ', 'certificate', 'diploma',
      't·ªët nghi·ªáp', 'graduate', 'ra tr∆∞·ªùng', 'finish', 'ho√†n th√†nh',
      'th·ª±c t·∫≠p', 'internship', 'practice', 'th·ª±c h√†nh', 'hands-on',
      'd·ª± √°n', 'project', 'b√†i t·∫≠p', 'assignment', 'lab'
    ];
    
    // Technology and career keywords - always career-related
    const techCareerKeywords = [
      'it', 'c√¥ng ngh·ªá th√¥ng tin', 'information technology', 'technology',
      'l·∫≠p tr√¨nh', 'programming', 'code', 'coding', 'developer', 'dev',
      'ph·∫ßn m·ªÅm', 'software', '·ª©ng d·ª•ng', 'application', 'app',
      'web', 'website', 'frontend', 'backend', 'fullstack',
      'data', 'd·ªØ li·ªáu', 'database', 'c∆° s·ªü d·ªØ li·ªáu', 'sql',
      'ai', 'artificial intelligence', 'machine learning', 'ml',
      'cybersecurity', 'an ninh m·∫°ng', 'b·∫£o m·∫≠t', 'security', 'hack',
      'thi·∫øt k·∫ø', 'design', 'graphic', 'ƒë·ªì h·ªça', 'ui', 'ux',
      'marketing', 'digital marketing', 'social media', 'qu·∫£ng c√°o',
      'business', 'kinh doanh', 'th∆∞∆°ng m·∫°i', 'qu·∫£n l√Ω', 'management'
    ];
    
    // Career and work-related keywords
    const careerKeywords = [
      'ngh·ªÅ nghi·ªáp', 'career', 'c√¥ng vi·ªác', 'job', 'work', 'vi·ªác l√†m',
      'k·ªπ nƒÉng', 'skill', 'nƒÉng l·ª±c', 'ability', 'competency',
      'tuy·ªÉn d·ª•ng', 'recruitment', 'ph·ªèng v·∫•n', 'interview', 'hiring',
      'l∆∞∆°ng', 'salary', 'thu nh·∫≠p', 'income', 'wage', 'pay',
      'thƒÉng ti·∫øn', 'promotion', 'ph√°t tri·ªÉn', 'development', 'growth',
      'h·ªçc t·∫≠p', 'learning', 'ƒë√†o t·∫°o', 'training', 'education',
      'kinh nghi·ªám', 'experience', 'chuy√™n m√¥n', 'expertise', 'professional',
      'ng√†nh', 'industry', 'lƒ©nh v·ª±c', 'field', 'sector', 'domain',
      'cv', 'resume', 'h·ªì s∆°', 'profile', 'portfolio',
      't∆∞∆°ng lai', 'future', 'ƒë·ªãnh h∆∞·ªõng', 'direction', 'path', 'plan',
      'c∆° h·ªôi', 'opportunity', 'tri·ªÉn v·ªçng', 'prospect', 'potential',
      'm·ª•c ti√™u', 'goal', 'target', 'objective', 'aim'
    ];
    
    // Learning and academic keywords
    const learningKeywords = [
      'h·ªçc', 'learn', 'study', 'studies', 'academic', 'education',
      'ki·∫øn th·ª©c', 'knowledge', 'hi·ªÉu bi·∫øt', 'understanding',
      't√†i li·ªáu', 'document', 'material', 'resource',
      's√°ch', 'book', 'reading', 'research', 'nghi√™n c·ª©u',
      'th√¥ng tin', 'information', 'info', 'data', 'detail',
      'h∆∞·ªõng d·∫´n', 'guide', 'tutorial', 'instruction',
      'c√°ch', 'how', 'l√†m sao', 'way', 'method', 'approach'
    ];
    
    // General interest keywords that could be education-related
    const generalInterestKeywords = [
      'g√¨', 'what', 'n√†o', 'which', 'nh∆∞ th·∫ø n√†o', 'how',
      't·∫°i sao', 'why', 'bao nhi√™u', 'how much', 'when', 'khi n√†o',
      '·ªü ƒë√¢u', 'where', 'c√≥', 'is', 'are', 'can', 'c√≥ th·ªÉ'
    ];
    
    // Only exclude very specific non-career topics
    const definitivelyNotCareerKeywords = [
      'th·ªùi ti·∫øt', 'weather', 'ƒÉn u·ªëng', 'food', 'du l·ªãch', 'travel',
      'phim', 'movie', 'nh·∫°c', 'music', 'th·ªÉ thao', 'sport',
      'game', 'tr√≤ ch∆°i', 'gi·∫£i tr√≠', 'entertainment',
      'y√™u ƒë∆∞∆°ng', 'love', 't√¨nh y√™u', 'relationship',
      's·ª©c kh·ªèe', 'health', 'b·ªánh', 'sick', 'y t·∫ø', 'medical'
    ];
    
    // Check if definitely not career-related
    const isDefinitelyNotCareer = definitivelyNotCareerKeywords.some(keyword => 
      questionLower.includes(keyword)
    );
    
    if (isDefinitelyNotCareer) {
      return false;
    }
    
    // Check FPT/Education keywords (highest priority)
    const hasFptEducationKeywords = fptEducationKeywords.some(keyword => 
      questionLower.includes(keyword)
    );
    
    if (hasFptEducationKeywords) {
      return true;
    }
    
    // Check tech/career keywords (high priority)
    const hasTechCareerKeywords = techCareerKeywords.some(keyword => 
      questionLower.includes(keyword)
    );
    
    if (hasTechCareerKeywords) {
      return true;
    }
    
    // Check general career keywords
    const hasCareerKeywords = careerKeywords.some(keyword => 
      questionLower.includes(keyword)
    );
    
    if (hasCareerKeywords) {
      return true;
    }
    
    // Check learning keywords
    const hasLearningKeywords = learningKeywords.some(keyword => 
      questionLower.includes(keyword)
    );
    
    if (hasLearningKeywords) {
      return true;
    }
    
    // For very general questions, default to career-related to prioritize document content
    const hasGeneralKeywords = generalInterestKeywords.some(keyword => 
      questionLower.includes(keyword)
    );
    
    if (hasGeneralKeywords && questionLower.length > 10) {
      // If it's a substantial question with general inquiry words, treat as career-related
      return true;
    }
    
    // Default to career-related unless explicitly non-career
    // This ensures we prioritize FPT document content
    return true;
  }

  /**
   * Generate a general conversation response (not career-related)
   */
  public async generateGeneralResponse(question: string): Promise<string> {
    // Demo mode - return mock general response
    if (env.GEMINI_API_KEY === 'demo') {
      return this.generateMockGeneralResponse(question);
    }
    
    try {
      const prompt = this.buildGeneralPrompt(question);
      
      const result = await (this.model as { generateContent: (prompt: string) => Promise<{ response: Promise<{ text: () => string }> }> }).generateContent(prompt);
      const response = await result.response;
      const text = response.text();
      
      return text.trim();
    } catch (error) {
      console.error('Error generating general response with Gemini:', error);
      return this.generateMockGeneralResponse(question);
    }
  }

  /**
   * Build prompt for general conversation
   */
  private buildGeneralPrompt(question: string): string {
    return `B·∫°n l√† m·ªôt tr·ª£ l√Ω AI th√¢n thi·ªán v√† h·ªØu √≠ch. H√£y tr·∫£ l·ªùi c√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng m·ªôt c√°ch t·ª± nhi√™n v√† th√¢n thi·ªán.

NGUY√äN T·∫ÆC:
1. Tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát
2. Gi·ªØ gi·ªçng ƒëi·ªáu th√¢n thi·ªán, l·ªãch s·ª±
3. N·∫øu kh√¥ng bi·∫øt c√¢u tr·∫£ l·ªùi, h√£y th√†nh th·∫≠t n√≥i kh√¥ng bi·∫øt
4. C√≥ th·ªÉ h·ªèi l·∫°i ƒë·ªÉ hi·ªÉu r√µ h∆°n c√¢u h·ªèi
5. **ƒê·ªäNH D·∫†NG**: S·ª≠ d·ª•ng Markdown ƒë·ªÉ ƒë·ªãnh d·∫°ng c√¢u tr·∫£ l·ªùi khi c·∫ßn thi·∫øt:
   - D√πng **in ƒë·∫≠m** cho ƒëi·ªÉm quan tr·ªçng
   - D√πng *in nghi√™ng* cho nh·∫•n m·∫°nh
   - D√πng danh s√°ch (-) khi li·ªát k√™ nhi·ªÅu √Ω

C√ÇU H·ªéI: ${question}

TR·∫¢ L·ªúI (ƒë·ªãnh d·∫°ng Markdown khi c·∫ßn):`;
  }

  /**
   * Generate mock general response for demo mode
   */
  private generateMockGeneralResponse(question: string): string {
    const questionLower = question.toLowerCase();
    
    // Greetings
    if (questionLower.includes('xin ch√†o') || questionLower.includes('hello') || questionLower.includes('hi')) {
      return 'üëã **Xin ch√†o!** T√¥i l√† tr·ª£ l√Ω AI c·ªßa b·∫°n. \n\nT√¥i c√≥ th·ªÉ gi√∫p b·∫°n:\n- üíº Tr·∫£ l·ªùi c√°c c√¢u h·ªèi v·ªÅ **t∆∞ v·∫•n ngh·ªÅ nghi·ªáp**\n- üí¨ Tr√≤ chuy·ªán th√¥ng th∆∞·ªùng\n\n*B·∫°n c·∫ßn t√¥i gi√∫p g√¨?*';
    }
    
    // How are you
    if (questionLower.includes('kh·ªèe kh√¥ng') || questionLower.includes('how are you') || questionLower.includes('th·∫ø n√†o')) {
      return 'C·∫£m ∆°n b·∫°n ƒë√£ h·ªèi! T√¥i ƒëang ho·∫°t ƒë·ªông t·ªët v√† s·∫µn s√†ng h·ªó tr·ª£ b·∫°n. B·∫°n c√≥ c·∫ßn t√¥i gi√∫p g√¨ kh√¥ng?';
    }
    
    // Thank you
    if (questionLower.includes('c·∫£m ∆°n') || questionLower.includes('thank you') || questionLower.includes('thanks')) {
      return 'Kh√¥ng c√≥ g√¨! T√¥i r·∫•t vui ƒë∆∞·ª£c gi√∫p ƒë·ª° b·∫°n. N·∫øu b·∫°n c√≥ th√™m c√¢u h·ªèi n√†o kh√°c, ƒë·ª´ng ng·∫ßn ng·∫°i h·ªèi nh√©!';
    }
    
    // Weather
    if (questionLower.includes('th·ªùi ti·∫øt') || questionLower.includes('weather')) {
      return 'T√¥i kh√¥ng th·ªÉ ki·ªÉm tra th·ªùi ti·∫øt hi·ªán t·∫°i, nh∆∞ng b·∫°n c√≥ th·ªÉ xem d·ª± b√°o th·ªùi ti·∫øt tr√™n c√°c ·ª©ng d·ª•ng nh∆∞ AccuWeather ho·∫∑c Weather.com. B·∫°n c√≥ c√¢u h·ªèi n√†o kh√°c t√¥i c√≥ th·ªÉ gi√∫p kh√¥ng?';
    }
    
    // Time
    if (questionLower.includes('m·∫•y gi·ªù') || questionLower.includes('time') || questionLower.includes('th·ªùi gian')) {
      return 'T√¥i kh√¥ng th·ªÉ xem gi·ªù hi·ªán t·∫°i, nh∆∞ng b·∫°n c√≥ th·ªÉ ki·ªÉm tra tr√™n thi·∫øt b·ªã c·ªßa m√¨nh. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n v·ªõi nh·ªØng c√¢u h·ªèi kh√°c kh√¥ng?';
    }
    
    // General fallback
    return `T√¥i hi·ªÉu b·∫°n ƒëang h·ªèi v·ªÅ "${question}". ƒê√¢y c√≥ v·∫ª nh∆∞ kh√¥ng ph·∫£i l√† c√¢u h·ªèi v·ªÅ t∆∞ v·∫•n ngh·ªÅ nghi·ªáp. T√¥i c√≥ th·ªÉ tr·∫£ l·ªùi t·ªët nh·∫•t c√°c c√¢u h·ªèi li√™n quan ƒë·∫øn s·ª± nghi·ªáp, k·ªπ nƒÉng, v√† ph√°t tri·ªÉn ngh·ªÅ nghi·ªáp. B·∫°n c√≥ mu·ªën h·ªèi g√¨ v·ªÅ nh·ªØng ch·ªß ƒë·ªÅ n√†y kh√¥ng?`;
  }
}

export { GeminiService }; 

