import { PineconeService } from './pinecone';
import { GeminiService } from './gemini';
import { FeedbackService } from './feedbackService';
import { WebSearchService } from './webSearchService';
import { UserPreferencesService } from './userPreferencesService';
import DocumentProcessorService from './documentProcessor';
import path from 'path';

/**
 * RAG (Retrieval-Augmented Generation) Service
 * Orchestrates document processing, vector storage, and question answering
 */
export class RAGService {
  private static instance: RAGService;
  private pineconeService: PineconeService;
  private geminiService: GeminiService;
  private documentProcessor: DocumentProcessorService;
  private isIndexed = false;

  private constructor() {
    this.pineconeService = PineconeService.getInstance();
    this.geminiService = GeminiService.getInstance();
    this.documentProcessor = new DocumentProcessorService();
  }

  /**
   * Get singleton instance of RAGService
   */
  public static getInstance(): RAGService {
    if (!RAGService.instance) {
      RAGService.instance = new RAGService();
    }
    return RAGService.instance;
  }

  /**
   * Initialize and ingest documents into vector database
   */
  public async ingestDocuments(documentsPath?: string): Promise<{
    totalChunks: number;
    processedFiles: string[];
    statistics: unknown;
  }> {
    try {
      console.log('üöÄ Starting document ingestion process...');
      
      // Use default documents path if not provided
      const docsPath = documentsPath ?? path.join(process.cwd(), 'documents');
      
      // Process documents and create chunks
      console.log('üìÑ Processing documents...');
      const chunks = await this.documentProcessor.processDocumentsDirectory(docsPath);
      
      if (chunks.length === 0) {
        throw new Error('No document chunks were created');
      }
      
      // Get statistics
      const statistics = this.documentProcessor.getChunkStatistics(chunks);
      console.log('üìä Document Statistics:', statistics);
      
      // Generate embeddings for all chunks
      console.log('üîÑ Generating embeddings...');
      const texts = chunks.map(chunk => chunk.content);
      const embeddings = await this.geminiService.generateEmbeddings(texts);
      
      // Ensure Pinecone index exists with correct dimension
      const embeddingDimension = embeddings[0]?.length ?? 768;
      await this.pineconeService.ensureIndexExists(embeddingDimension);
      
      // Prepare vectors for Pinecone
      const vectors = chunks.map((chunk, index) => ({
        id: chunk.id,
        values: embeddings[index]!,
        metadata: {
          content: chunk.content,
          source: chunk.metadata.source,
          chunkIndex: chunk.metadata.chunkIndex,
          contentLength: chunk.metadata.contentLength,
        },
      }));
      
      // Upload vectors to Pinecone
      console.log('üóÑÔ∏è Uploading vectors to Pinecone...');
      await this.pineconeService.upsertVectors(vectors);
      
      this.isIndexed = true;
      console.log('‚úÖ Document ingestion completed successfully!');
      
      return {
        totalChunks: chunks.length,
        processedFiles: statistics.sources,
        statistics,
      };
      
    } catch (error) {
      console.error('‚ùå Error during document ingestion:', error);
      throw error;
    }
  }

  /**
   * Ask a question with intelligent routing between career advice and general chat
   */
  public async askQuestion(
    question: string,
    conversationId: string = 'default',
    webSearchEnabled: boolean = false
  ): Promise<{
    answer: string;
    sources: string[];
    webSources?: string[];
    hasRelevantContent: boolean;
    isCareerRelated: boolean;
    confidence: number;
    usedWebSearch?: boolean;
  }> {
    try {
      console.log(`üìù Processing question: ${question.substring(0, 50)}...`);
      console.log(`üîç Processing question: ${question}`);

      const geminiService = GeminiService.getInstance();
      const feedbackService = FeedbackService.getInstance();
      
      // Add user message to conversation history
      feedbackService.addMessage(conversationId, 'user', question);
      
      // Check if question is career-related (very aggressive classification now)
      const isCareerRelated = geminiService.isCareerRelatedQuestion(question);
      console.log(`üéØ Question type: ${isCareerRelated ? 'Career-related (using FPT documents)' : 'General conversation'}`);

      let answer: string;
      let sources: string[] = [];
      let webSources: string[] = [];
      let hasRelevantContent = false;
      let confidence = 0.5;
      let usedWebSearch = false;

      if (isCareerRelated) {
        // Career-related question - ALWAYS use RAG with FPT documents first
        console.log('üìö Prioritizing FPT School document content...');
        const ragResult = await this.processCareerQuestion(question, conversationId, webSearchEnabled);
        answer = ragResult.answer;
        sources = ragResult.sources;
        webSources = ragResult.webSources || [];
        hasRelevantContent = ragResult.hasRelevantContent;
        confidence = ragResult.confidence;
        usedWebSearch = ragResult.usedWebSearch || false;
      } else {
        // Only truly general conversation (very rare now) - use general AI response
        console.log('üí¨ Processing as general conversation...');
        if (webSearchEnabled) {
          const webResult = await this.processGeneralQuestionWithWebSearch(question, conversationId);
          answer = webResult.answer;
          webSources = webResult.webSources || [];
          usedWebSearch = true;
          confidence = 0.8;
        } else {
          answer = await this.processGeneralQuestion(question, conversationId);
          confidence = 0.8; // High confidence for general chat
        }
      }

      // Add assistant response to conversation history
      feedbackService.addMessage(conversationId, 'assistant', answer, {
        isCareerRelated,
        sources: sources.length > 0 ? sources : undefined,
      });

      console.log('‚úÖ Question answered successfully');

      return {
        answer,
        sources,
        webSources: webSources.length > 0 ? webSources : undefined,
        hasRelevantContent,
        isCareerRelated,
        confidence,
        usedWebSearch,
      };
    } catch (error) {
      console.error('‚ùå Error answering question:', error);
      
      // Fallback response
      const fallbackAnswer = 'Xin l·ªói, t√¥i ƒëang g·∫∑p m·ªôt ch√∫t v·∫•n ƒë·ªÅ k·ªπ thu·∫≠t. B·∫°n c√≥ th·ªÉ th·ª≠ h·ªèi l·∫°i c√¢u h·ªèi kh√¥ng?';
      
      return {
        answer: fallbackAnswer,
        sources: [],
        hasRelevantContent: false,
        isCareerRelated: false,
        confidence: 0.1,
      };
    }
  }

  /**
   * Process career-related questions using RAG
   */
  private async processCareerQuestion(
    question: string,
    conversationId: string,
    webSearchEnabled: boolean = false
  ): Promise<{
    answer: string;
    sources: string[];
    webSources?: string[];
    hasRelevantContent: boolean;
    confidence: number;
    usedWebSearch?: boolean;
  }> {
    const geminiService = GeminiService.getInstance();
    const feedbackService = FeedbackService.getInstance();
    
    // Check for learned responses first
    const learnedResponses = feedbackService.getLearnedResponses(question);
    if (learnedResponses.length > 0) {
      console.log('üß† Using learned response from previous positive feedback');
      return {
        answer: learnedResponses[Math.floor(Math.random() * learnedResponses.length)],
        sources: ['learned_response'],
        hasRelevantContent: true,
        confidence: 0.9,
        usedWebSearch: false,
      };
    }

    // Get conversation context
    const conversationContext = feedbackService.getConversationContext(conversationId, 5);
    
    // Generate embedding for the question
    const questionEmbedding = await geminiService.generateEmbedding(question);
    
    // Search for relevant documents - get more results to ensure coverage
    const searchResults = await this.pineconeService.similaritySearch(
      questionEmbedding,
      8 // top 8 results for better coverage
    );
    
    console.log(`üîç Found ${searchResults.length} search results`);
    
    // Use MUCH lower threshold to prioritize document content over general knowledge
    // For FPT School counseling, even loosely related content is better than generic responses
    const relevantResults = searchResults.filter(result => result.score > 0.15);
    
    let webSources: string[] = [];
    let webContext = '';
    let usedWebSearch = false;

    // If web search is enabled, search for additional information
    if (webSearchEnabled) {
      try {
        const webSearchService = WebSearchService.getInstance();
        const webResults = await webSearchService.searchWeb(question, 3);
        const webInfo = webSearchService.extractKeyInformation(webResults.results);
        webContext = webInfo.combinedContent;
        webSources = webInfo.sources;
        usedWebSearch = true;
        console.log(`üîç Web search completed: ${webResults.results.length} results`);
      } catch (error) {
        console.error('‚ö†Ô∏è Web search failed:', error);
        // Continue without web search if it fails
      }
    }

    if (relevantResults.length === 0) {
      console.log('‚ÑπÔ∏è No high-score documents found, trying with ANY available document content...');
      
      // Try again with even lower threshold to get SOME document content
      const anyResults = searchResults.filter(result => result.score > 0.05);
      
      if (anyResults.length > 0) {
        console.log(`üìÑ Using ${anyResults.length} low-score documents as better than no documents`);
        // Use the low-score documents anyway - FPT documents are better than no documents
        const contextText = anyResults
          .map(result => result.metadata?.text || '')
          .join('\n\n');
        
        const sources = [...new Set(anyResults
          .map(result => result.metadata?.source || 'unknown')
          .filter(source => source !== 'unknown'))];
        
        // Combine with web search if available
        let combinedContext = contextText;
        if (webContext) {
          combinedContext = `${contextText}\n\nTH√îNG TIN B·ªî SUNG T·ª™ WEB:\n${webContext}`;
        }
        
        const contextualPrompt = this.buildContextualCareerPrompt(question, conversationContext, combinedContext);
        const answer = await geminiService.generateAnswer(question, combinedContext, contextualPrompt);
        
        return {
          answer,
          sources,
          webSources: webSources.length > 0 ? webSources : undefined,
          hasRelevantContent: true, // Still mark as relevant since we used FPT documents
          confidence: webSources.length > 0 ? 0.65 : 0.55, // Lower confidence but still document-based
          usedWebSearch,
        };
      }
      
      console.log('‚ö†Ô∏è Absolutely no document content found, using general career knowledge');
      
      // Only fall back to general knowledge if NO documents found at all
      let combinedContext = '';
      if (webContext) {
        combinedContext = `TH√îNG TIN T·ª™ WEB:\n${webContext}\n\n`;
      }
      
      // Use general career knowledge with conversation context
      const contextualPrompt = this.buildContextualCareerPrompt(question, conversationContext, combinedContext);
      const answer = await geminiService.generateAnswer(question, '', contextualPrompt);
      
      return {
        answer,
        sources: ['general_knowledge'],
        webSources: webSources.length > 0 ? webSources : undefined,
        hasRelevantContent: false,
        confidence: webSources.length > 0 ? 0.75 : 0.6,
        usedWebSearch,
      };
    }
    
    // Extract context from relevant results
    const contextText = relevantResults
      .map(result => result.metadata?.text || '')
      .join('\n\n');
    
    const sources = [...new Set(relevantResults
      .map(result => result.metadata?.source || 'unknown')
      .filter(source => source !== 'unknown'))];
    
    console.log(`üìö Using context from sources: ${sources.join(', ')}`);
    
    // Combine document context with web search context if available
    let combinedContext = contextText;
    if (webContext) {
      combinedContext = `${contextText}\n\nTH√îNG TIN B·ªî SUNG T·ª™ WEB:\n${webContext}`;
    }
    
    // Build contextual prompt with conversation history
    const contextualPrompt = this.buildContextualCareerPrompt(question, conversationContext, combinedContext);
    
    // Generate answer using the context
    const answer = await geminiService.generateAnswer(question, combinedContext, contextualPrompt);
    
    // Calculate confidence based on search scores
    const avgScore = relevantResults.reduce((sum, result) => sum + result.score, 0) / relevantResults.length;
    let confidence = Math.min(0.95, avgScore + 0.2);
    
    // Boost confidence if web search provided additional context
    if (webSources.length > 0) {
      confidence = Math.min(0.98, confidence + 0.1);
    }
    
    return {
      answer,
      sources,
      webSources: webSources.length > 0 ? webSources : undefined,
      hasRelevantContent: true,
      confidence,
      usedWebSearch,
    };
  }

  /**
   * Process general conversation questions
   */
  private async processGeneralQuestion(
    question: string,
    conversationId: string
  ): Promise<string> {
    const geminiService = GeminiService.getInstance();
    const feedbackService = FeedbackService.getInstance();
    const preferencesService = UserPreferencesService.getInstance();
    
    // Get conversation context
    const conversationContext = feedbackService.getConversationContext(conversationId, 3);
    
    // Check for learned responses
    const learnedResponses = feedbackService.getLearnedResponses(question);
    if (learnedResponses.length > 0) {
      console.log('üß† Using learned general response');
      return learnedResponses[Math.floor(Math.random() * learnedResponses.length)];
    }
    
    // Get user preferences for personalization
    const userContext = preferencesService.getUserContext();
    const personalityInstruction = preferencesService.getPersonalityInstruction();
    
    // Generate contextual general response
    let contextualQuestion = question;
    
    // Add user preferences to context
    let fullContext = personalityInstruction;
    if (userContext) {
      fullContext += userContext;
    }
    
    if (conversationContext.length > 0) {
      const recentContext = conversationContext
        .slice(-2)
        .map(msg => `${msg.role}: ${msg.content}`)
        .join('\n');
      
      contextualQuestion = `${fullContext}\n\nNg·ªØ c·∫£nh cu·ªôc tr√≤ chuy·ªán:\n${recentContext}\n\nC√¢u h·ªèi hi·ªán t·∫°i: ${question}`;
    } else {
      contextualQuestion = `${fullContext}\n\nC√¢u h·ªèi: ${question}`;
    }
    
    return await geminiService.generateGeneralResponse(contextualQuestion);
  }

  /**
   * Process general questions with web search
   */
  private async processGeneralQuestionWithWebSearch(
    question: string,
    conversationId: string
  ): Promise<{
    answer: string;
    webSources?: string[];
  }> {
    const geminiService = GeminiService.getInstance();
    const feedbackService = FeedbackService.getInstance();
    const webSearchService = WebSearchService.getInstance();
    const preferencesService = UserPreferencesService.getInstance();
    
    // Get conversation context and user preferences
    const conversationContext = feedbackService.getConversationContext(conversationId, 3);
    const userContext = preferencesService.getUserContext();
    const personalityInstruction = preferencesService.getPersonalityInstruction();
    
    try {
      // Perform web search
      const webResults = await webSearchService.searchWeb(question, 3);
      const webInfo = webSearchService.extractKeyInformation(webResults.results);
      
      console.log(`üîç Web search for general question completed: ${webResults.results.length} results`);
      
      // Build prompt with web context and user preferences
      let contextualQuestion = question;
      let fullContext = personalityInstruction;
      if (userContext) {
        fullContext += userContext;
      }
      
      if (conversationContext.length > 0) {
        const recentContext = conversationContext
          .slice(-2)
          .map(msg => `${msg.role}: ${msg.content}`)
          .join('\n');
        
        contextualQuestion = `${fullContext}\n\nNg·ªØ c·∫£nh cu·ªôc tr√≤ chuy·ªán:\n${recentContext}\n\nTh√¥ng tin t·ª´ web:\n${webInfo.combinedContent}\n\nC√¢u h·ªèi hi·ªán t·∫°i: ${question}`;
      } else {
        contextualQuestion = `${fullContext}\n\nTh√¥ng tin t·ª´ web:\n${webInfo.combinedContent}\n\nC√¢u h·ªèi: ${question}`;
      }
      
      const answer = await geminiService.generateGeneralResponse(contextualQuestion);
      
      return {
        answer,
        webSources: webInfo.sources,
      };
    } catch (error) {
      console.error('‚ö†Ô∏è Web search failed for general question:', error);
      
      // Fallback to regular general response with user preferences
      let contextualQuestion = question;
      let fullContext = personalityInstruction;
      if (userContext) {
        fullContext += userContext;
      }
      
      if (conversationContext.length > 0) {
        const recentContext = conversationContext
          .slice(-2)
          .map(msg => `${msg.role}: ${msg.content}`)
          .join('\n');
        
        contextualQuestion = `${fullContext}\n\nNg·ªØ c·∫£nh cu·ªôc tr√≤ chuy·ªán:\n${recentContext}\n\nC√¢u h·ªèi hi·ªán t·∫°i: ${question}`;
      } else {
        contextualQuestion = `${fullContext}\n\nC√¢u h·ªèi: ${question}`;
      }
      
      const answer = await geminiService.generateGeneralResponse(contextualQuestion);
      
      return {
        answer,
      };
    }
  }

  /**
   * Build contextual career prompt with conversation history
   */
  private buildContextualCareerPrompt(
    question: string,
    conversationContext: Array<{ role: 'user' | 'assistant'; content: string; isCareerRelated?: boolean }>,
    documentContext?: string
  ): string {
    // Get user preferences for personalization
    const preferencesService = UserPreferencesService.getInstance();
    const userContext = preferencesService.getUserContext();
    const personalityInstruction = preferencesService.getPersonalityInstruction();

    let prompt = `B·∫°n l√† chuy√™n gia t∆∞ v·∫•n tuy·ªÉn sinh c·ªßa FPT School - tr∆∞·ªùng ƒë√†o t·∫°o c√¥ng ngh·ªá h√†ng ƒë·∫ßu Vi·ªát Nam. B·∫°n c√≥ kinh nghi·ªám s√¢u r·ªông v·ªÅ c√°c ng√†nh h·ªçc c√¥ng ngh·ªá, xu h∆∞·ªõng th·ªã tr∆∞·ªùng lao ƒë·ªông v√† ƒë·ªãnh h∆∞·ªõng ngh·ªÅ nghi·ªáp cho sinh vi√™n.

${userContext}

B·ªêI C·∫¢NH FPT SCHOOL:
- Chuy√™n ƒë√†o t·∫°o c√°c ng√†nh c√¥ng ngh·ªá: C√¥ng ngh·ªá th√¥ng tin, An ninh m·∫°ng, Thi·∫øt k·∫ø ƒë·ªì h·ªça, Marketing s·ªë, Kinh doanh qu·ªëc t·∫ø
- Ph∆∞∆°ng ph√°p h·ªçc t·∫≠p th·ª±c h√†nh, d·ª± √°n th·ª±c t·∫ø t·ª´ doanh nghi·ªáp
- C∆° h·ªôi th·ª±c t·∫≠p v√† l√†m vi·ªác t·∫°i h·ªá sinh th√°i FPT Corporation
- M√¥i tr∆∞·ªùng h·ªçc t·∫≠p qu·ªëc t·∫ø v·ªõi nhi·ªÅu ch∆∞∆°ng tr√¨nh trao ƒë·ªïi

NGUY√äN T·∫ÆC T∆Ø V·∫§N (QUAN TR·ªåNG):
1. **∆ØU TI√äN TUY·ªÜT ƒê·ªêI**: Lu√¥n d·ª±a v√†o th√¥ng tin t·ª´ t√†i li·ªáu FPT School ƒë∆∞·ª£c cung c·∫•p
2. **T·∫¨P TRUNG FPT SCHOOL**: M·ªçi l·ªùi khuy√™n ph·∫£i li√™n k·∫øt v·ªõi c√°c ch∆∞∆°ng tr√¨nh ƒë√†o t·∫°o c·ªßa FPT School
3. Tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát, th√¢n thi·ªán v√† d·ªÖ hi·ªÉu cho h·ªçc sinh THPT v√† ph·ª• huynh
4. ƒê·ªãnh h∆∞·ªõng c·ª• th·ªÉ v·ªÅ ng√†nh h·ªçc v√† ngh·ªÅ nghi·ªáp t·∫°i FPT School
5. **TR√çCH D·∫™N T√ÄI LI·ªÜU**: Lu√¥n tr√≠ch d·∫´n v√† tham kh·∫£o th√¥ng tin t·ª´ t√†i li·ªáu FPT School
6. ƒê∆∞a ra l·ªùi khuy√™n th·ª±c t·∫ø v·ªÅ c∆° h·ªôi vi·ªác l√†m sau khi t·ªët nghi·ªáp FPT School
7. K·∫øt n·ªëi v·ªõi h·ªá sinh th√°i FPT Corporation v√† ƒë·ªëi t√°c doanh nghi·ªáp
8. ${personalityInstruction}
9. **ƒê·ªäNH D·∫†NG MARKDOWN**: 
   - D√πng **in ƒë·∫≠m** cho t√™n ng√†nh h·ªçc FPT School, c∆° h·ªôi ngh·ªÅ nghi·ªáp
   - D√πng *in nghi√™ng* ƒë·ªÉ nh·∫•n m·∫°nh ƒëi·ªÉm m·∫°nh c·ªßa FPT School
   - D√πng danh s√°ch (-) ƒë·ªÉ li·ªát k√™ ch∆∞∆°ng tr√¨nh h·ªçc, k·ªπ nƒÉng FPT ƒë√†o t·∫°o
   - D√πng > ƒë·ªÉ tr√≠ch d·∫´n TR·ª∞C TI·∫æP th√¥ng tin t·ª´ t√†i li·ªáu FPT School
   - D√πng \`code\` cho c√¥ng ngh·ªá, k·ªπ nƒÉng ƒë∆∞·ª£c d·∫°y t·∫°i FPT School
   
**CH·ªà TH·ªä ƒê·∫∂C BI·ªÜT**: N·∫øu c√≥ th√¥ng tin t·ª´ t√†i li·ªáu FPT School, b·∫Øt bu·ªôc ph·∫£i s·ª≠ d·ª•ng v√† tr√≠ch d·∫´n. Kh√¥ng ƒë∆∞·ª£c t·ª± suy di·ªÖn khi ƒë√£ c√≥ t√†i li·ªáu ch√≠nh th·ª©c.`;

    // Add conversation context if available
    if (conversationContext.length > 0) {
      const contextText = conversationContext
        .filter(msg => msg.isCareerRelated !== false) // Include career-related and undefined
        .slice(-3) // Last 3 relevant messages
        .map(msg => `${msg.role === 'user' ? 'Ng∆∞·ªùi d√πng' : 'Tr·ª£ l√Ω'}: ${msg.content}`)
        .join('\n');
      
      if (contextText) {
        prompt += `\n\nNG·ªÆ C·∫¢NH CU·ªòC TR√í CHUY·ªÜN TR∆Ø·ªöC ƒê√ì:\n${contextText}`;
      }
    }

    // Add document context if available
    if (documentContext) {
      prompt += `\n\nTH√îNG TIN T·ª™ T√ÄI LI·ªÜU:\n${documentContext}`;
    }

    prompt += `\n\nC√ÇU H·ªéI: ${question}\n\nTR·∫¢ L·ªúI (ƒë·ªãnh d·∫°ng Markdown):`;
    
    return prompt;
  }

  /**
   * Store user feedback for learning
   */
  public async storeFeedback(
    question: string,
    answer: string,
    rating: 'positive' | 'negative' | 'neutral',
    isCareerRelated: boolean,
    userComment?: string,
    sources?: string[],
    hasRelevantContent?: boolean
  ): Promise<void> {
    const feedbackService = FeedbackService.getInstance();
    
    await feedbackService.storeFeedback({
      question,
      answer,
      rating,
      isCareerRelated,
      userComment,
      sources,
      hasRelevantContent,
    });
  }

  /**
   * Get feedback statistics
   */
  public getFeedbackStats() {
    const feedbackService = FeedbackService.getInstance();
    return feedbackService.getFeedbackStats();
  }

  /**
   * Check if documents have been indexed
   */
  public async isDocumentsIndexed(): Promise<boolean> {
    try {
      const stats = await this.getIndexStats();
      const hasVectors = stats.totalVectors > 0;
      
      // Update the internal flag based on actual index state
      this.isIndexed = hasVectors;
      
      return hasVectors;
    } catch (error) {
      console.error('Error checking if documents are indexed:', error);
      return false;
    }
  }

  /**
   * Clear all vectors from Pinecone index
   */
  public async clearIndex(): Promise<void> {
    try {
      // Check if index exists before trying to clear it
      const indexExists = await this.pineconeService.checkIndexExists();
      if (indexExists) {
        await this.pineconeService.clearIndex();
        console.log('üóëÔ∏è Index cleared successfully');
      } else {
        console.log('üóëÔ∏è Index does not exist, skipping clear operation');
      }
      this.isIndexed = false;
    } catch (error) {
      console.error('‚ùå Error clearing index:', error);
      // Don't throw error if index doesn't exist
      if (!error.message?.includes('404') && !error.message?.includes('NotFound')) {
        throw error;
      }
    }
  }

  /**
   * Get index statistics
   */
  public async getIndexStats(): Promise<{
    totalVectors: number;
    indexReady: boolean;
  }> {
    try {
      // First ensure index exists
      await this.pineconeService.ensureIndexExists();
      
      // Use the new getIndexStats method from PineconeService
      return await this.pineconeService.getIndexStats();
    } catch (error) {
      console.error('Error getting index stats:', error);
      return {
        totalVectors: 0,
        indexReady: false,
      };
    }
  }

  /**
   * Test the RAG system with a sample question
   */
  public async testSystem(): Promise<{
    success: boolean;
    message: string;
    details?: unknown;
  }> {
    try {
      // Check if documents are indexed
      const isIndexed = await this.isDocumentsIndexed();
      if (!isIndexed) {
        return {
          success: false,
          message: 'Documents not indexed. Please run ingestion first.',
        };
      }
      
      // Test with a simple question
      const testQuestion = 'Xin ch√†o, b·∫°n c√≥ th·ªÉ gi√∫p t√¥i g√¨?';
      const result = await this.askQuestion(testQuestion);
      
      return {
        success: true,
        message: 'RAG system test completed successfully',
        details: {
          question: testQuestion,
          hasAnswer: result.answer.length > 0,
          hasRelevantContent: result.hasRelevantContent,
          sourcesCount: result.sources.length,
        },
      };
      
    } catch (error) {
      return {
        success: false,
        message: `RAG system test failed: ${String(error)}`,
      };
    }
  }
} 


