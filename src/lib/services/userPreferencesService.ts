export interface UserPreferences {
  name: string;
  occupation: string;
  traits: string[];
  additionalInfo: string;
}

export interface TraitDefinition {
  id: string;
  label: string;
  icon: string;
  description: string;
}

/**
 * User Preferences Service
 * Manages user customization settings and integrates them with chat responses
 */
export class UserPreferencesService {
  private static instance: UserPreferencesService;
  private preferences: UserPreferences | null = null;

  // Trait definitions with descriptions for FPT School counseling context
  private readonly traitDefinitions: Record<string, TraitDefinition> = {
    friendly: {
      id: 'friendly',
      label: 'th√¢n thi·ªán',
      icon: 'üòä',
      description: 'warm, approachable, and creating a comfortable counseling environment'
    },
    professional: {
      id: 'professional',
      label: 'chuy√™n nghi·ªáp',
      icon: 'üíº',
      description: 'formal, structured, providing clear academic and career guidance'
    },
    concise: {
      id: 'concise',
      label: 's√∫c t√≠ch',
      icon: 'üìù',
      description: 'brief, to-the-point, giving clear answers without overwhelming details'
    },
    detailed: {
      id: 'detailed',
      label: 'chi ti·∫øt',
      icon: 'üîç',
      description: 'thorough explanations of programs, career paths, and study requirements'
    },
    empathetic: {
      id: 'empathetic',
      label: 'ƒë·ªìng c·∫£m',
      icon: 'üíù',
      description: 'understanding student concerns, fears, and family expectations about education'
    },
    encouraging: {
      id: 'encouraging',
      label: 'ƒë·ªông vi√™n',
      icon: 'üåü',
      description: 'motivational, building confidence in students about their potential'
    },
    patient: {
      id: 'patient',
      label: 'ki√™n nh·∫´n',
      icon: '‚è≥',
      description: 'calm, taking time to explain concepts and answer all questions thoroughly'
    },
    practical: {
      id: 'practical',
      label: 'th·ª±c t·∫ø',
      icon: 'üéØ',
      description: 'focused on real-world applications, job market insights, and practical advice'
    },
    analytical: {
      id: 'analytical',
      label: 'ph√¢n t√≠ch',
      icon: 'üìä',
      description: 'data-driven approach to career guidance, using market trends and statistics'
    },
    inspiring: {
      id: 'inspiring',
      label: 'truy·ªÅn c·∫£m h·ª©ng',
      icon: '‚ú®',
      description: 'motivating students to pursue their dreams in technology and innovation'
    }
  };

  private constructor() {
    this.loadPreferences();
  }

  /**
   * Get singleton instance of UserPreferencesService
   */
  public static getInstance(): UserPreferencesService {
    if (!UserPreferencesService.instance) {
      UserPreferencesService.instance = new UserPreferencesService();
    }
    return UserPreferencesService.instance;
  }

  /**
   * Load preferences from localStorage
   */
  public loadPreferences(): UserPreferences | null {
    try {
      if (typeof window !== 'undefined') {
        const saved = localStorage.getItem('chatbot-preferences');
        if (saved) {
          this.preferences = JSON.parse(saved) as UserPreferences;
          return this.preferences;
        }
      }
    } catch (error) {
      console.error('Error loading user preferences:', error);
    }
    return null;
  }

  /**
   * Save preferences to localStorage
   */
  public savePreferences(preferences: UserPreferences): void {
    try {
      if (typeof window !== 'undefined') {
        localStorage.setItem('chatbot-preferences', JSON.stringify(preferences));
        this.preferences = preferences;
      }
    } catch (error) {
      console.error('Error saving user preferences:', error);
    }
  }

  /**
   * Get current preferences
   */
  public getPreferences(): UserPreferences | null {
    if (!this.preferences) {
      return this.loadPreferences();
    }
    return this.preferences;
  }

  /**
   * Build personalized context for AI prompts
   */
  public buildPersonalizedContext(): string {
    const prefs = this.getPreferences();
    if (!prefs) return '';

    let context = '';

    // Add user name
    if (prefs.name) {
      context += `Ng∆∞·ªùi d√πng t√™n: ${prefs.name}\n`;
    }

    // Add occupation
    if (prefs.occupation) {
      context += `Ngh·ªÅ nghi·ªáp: ${prefs.occupation}\n`;
    }

    // Add personality traits
    if (prefs.traits.length > 0) {
      const traitDescriptions = prefs.traits
        .map(traitId => {
          const trait = this.traitDefinitions[traitId];
          return trait ? trait.description : traitId;
        })
        .join(', ');
      
      context += `Phong c√°ch tr·∫£ l·ªùi mong mu·ªën: ${traitDescriptions}\n`;
    }

    // Add additional info
    if (prefs.additionalInfo) {
      context += `Th√¥ng tin b·ªï sung: ${prefs.additionalInfo}\n`;
    }

    return context;
  }

  /**
   * Build personalized greeting for FPT School context
   */
  public buildPersonalizedGreeting(): string {
    const prefs = this.getPreferences();
    if (!prefs) return 'Xin ch√†o! T√¥i l√† tr·ª£ l√Ω t∆∞ v·∫•n tuy·ªÉn sinh c·ªßa FPT School. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n t√¨m hi·ªÉu v·ªÅ c√°c ng√†nh h·ªçc v√† ƒë·ªãnh h∆∞·ªõng ngh·ªÅ nghi·ªáp ph√π h·ª£p!';

    let greeting = 'Xin ch√†o';
    
    if (prefs.name) {
      greeting += ` ${prefs.name}`;
    }

    greeting += '! ';

    // Add context-specific greeting based on user info
    if (prefs.occupation) {
      if (prefs.occupation.toLowerCase().includes('h·ªçc sinh') || prefs.occupation.toLowerCase().includes('student')) {
        greeting += 'T√¥i th·∫•y b·∫°n ƒëang l√† h·ªçc sinh. ';
      } else if (prefs.occupation.toLowerCase().includes('ph·ª• huynh') || prefs.occupation.toLowerCase().includes('parent')) {
        greeting += 'T√¥i hi·ªÉu b·∫°n ƒëang quan t√¢m ƒë·∫øn vi·ªác ƒë·ªãnh h∆∞·ªõng cho con em m√¨nh. ';
      } else {
        greeting += `V·ªõi kinh nghi·ªám ${prefs.occupation.toLowerCase()}, `;
      }
    }

    greeting += 'T√¥i l√† tr·ª£ l√Ω t∆∞ v·∫•n tuy·ªÉn sinh c·ªßa **FPT School** v√† s·∫Ω gi√∫p b·∫°n t√¨m hi·ªÉu v·ªÅ c√°c ng√†nh h·ªçc c√¥ng ngh·ªá, c∆° h·ªôi ngh·ªÅ nghi·ªáp v√† l·ªô tr√¨nh ph√°t tri·ªÉn s·ª± nghi·ªáp. B·∫°n mu·ªën kh√°m ph√° ƒëi·ªÅu g√¨ h√¥m nay?';

    return greeting;
  }

  /**
   * Get personality instruction for AI
   */
  public getPersonalityInstruction(): string {
    const prefs = this.getPreferences();
    if (!prefs || prefs.traits.length === 0) {
      return 'H√£y tr·∫£ l·ªùi m·ªôt c√°ch th√¢n thi·ªán v√† h·ªØu √≠ch.';
    }

    const traitLabels = prefs.traits
      .map(traitId => {
        const trait = this.traitDefinitions[traitId];
        return trait ? trait.label : traitId;
      })
      .join(', ');

    return `H√£y tr·∫£ l·ªùi theo phong c√°ch: ${traitLabels}. Th·ªÉ hi·ªán nh·ªØng ƒë·∫∑c ƒëi·ªÉm n√†y trong c√°ch giao ti·∫øp c·ªßa b·∫°n.`;
  }

  /**
   * Check if user has set preferences
   */
  public hasPreferences(): boolean {
    const prefs = this.getPreferences();
    return !!(prefs && (prefs.name || prefs.occupation || prefs.traits.length > 0 || prefs.additionalInfo));
  }

  /**
   * Get trait definitions
   */
  public getTraitDefinitions(): Record<string, TraitDefinition> {
    return this.traitDefinitions;
  }

  /**
   * Get available traits as array
   */
  public getAvailableTraits(): TraitDefinition[] {
    return Object.values(this.traitDefinitions);
  }

  /**
   * Clear all preferences
   */
  public clearPreferences(): void {
    try {
      if (typeof window !== 'undefined') {
        localStorage.removeItem('chatbot-preferences');
        this.preferences = null;
      }
    } catch (error) {
      console.error('Error clearing user preferences:', error);
    }
  }

  /**
   * Get user-specific conversation context for FPT School counseling
   */
  public getUserContext(): string {
    const prefs = this.getPreferences();
    if (!prefs) return '';

    let context = '\nTH√îNG TIN H·ªåC VI√äN C·∫¶N T∆Ø V·∫§N:\n';
    
    if (prefs.name) {
      context += `- T√™n: ${prefs.name}\n`;
    }
    
    if (prefs.occupation) {
      context += `- Hi·ªán t·∫°i: ${prefs.occupation}\n`;
    }
    
    if (prefs.traits.length > 0) {
      const traits = prefs.traits
        .map(id => this.traitDefinitions[id]?.label || id)
        .join(', ');
      context += `- Phong c√°ch t∆∞ v·∫•n mong mu·ªën: ${traits}\n`;
    }
    
    if (prefs.additionalInfo) {
      context += `- Th√¥ng tin b·ªï sung: ${prefs.additionalInfo}\n`;
    }

    context += '\nH∆∞·ªõng d·∫´n: D·ª±a tr√™n th√¥ng tin tr√™n ƒë·ªÉ t∆∞ v·∫•n ph√π h·ª£p v·ªÅ c√°c ng√†nh h·ªçc t·∫°i FPT School v√† ƒë·ªãnh h∆∞·ªõng ngh·ªÅ nghi·ªáp c√¥ng ngh·ªá.\n';

    return context;
  }
} 